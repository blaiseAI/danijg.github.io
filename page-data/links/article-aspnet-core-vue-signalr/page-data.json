{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-link-js","path":"/links/article-aspnet-core-vue-signalr/","result":{"data":{"mdx":{"id":"d1d90f61-d049-5674-9989-aa774f9c8792","excerpt":"Using an ASP.NET Core backend, and a Vue.js frontend, we will look into the main concepts and building blocks of SignalR by implementing aâ€¦","frontmatter":{"title":"Using ASP.NET Core SignalR with Vue.js (to create a mini Stack Overflow rip-off)","date":"2019-02-16T00:00:00.000Z","link":"https://www.dotnetcurry.com/aspnet-core/1480/aspnet-core-vuejs-signalr-app","tags":["post","aspnet-core","vue","signalr","dotnetcurry"],"cover":null},"fields":{"slug":"/links/article-aspnet-core-vue-signalr/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using ASP.NET Core SignalR with Vue.js (to create a mini Stack Overflow rip-off)\",\n  \"date\": \"2019-02-16T00:00:00.000Z\",\n  \"tags\": [\"post\", \"aspnet-core\", \"vue\", \"signalr\", \"dotnetcurry\"],\n  \"link\": \"https://www.dotnetcurry.com/aspnet-core/1480/aspnet-core-vuejs-signalr-app\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Using an ASP.NET Core backend, and a Vue.js frontend, we will look into the main concepts and building blocks of SignalR by implementing a minimalistic version of Stack Overflow.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d1d90f61-d049-5674-9989-aa774f9c8792"}}}