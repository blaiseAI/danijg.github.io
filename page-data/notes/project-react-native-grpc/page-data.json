{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-note-js","path":"/notes/project-react-native-grpc/","result":{"data":{"mdx":{"id":"c9202936-1b02-5a35-b40b-2841974dfa67","excerpt":"A sample react-native app that communicates using gRPC with a sample server, also contained in this repo. Both the client app and the serverâ€¦","frontmatter":{"title":"Sample integration between react-native and a gRPC service","date":"2018-01-25T00:00:00.000Z","tags":["project","javascript","grpx","react-native"],"cover":null},"fields":{"slug":"/notes/project-react-native-grpc/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sample integration between react-native and a gRPC service\",\n  \"date\": \"2018-01-25T00:00:00.000Z\",\n  \"tags\": [\"project\", \"javascript\", \"grpx\", \"react-native\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A sample react-native app that communicates using gRPC with a sample server, also contained in this repo. Both the client app and the server share the protocol buffer definition, which is used to generate both server and client side code.\"), mdx(\"p\", null, \"The client side react-native application can talk to the gRPC server through a native module that bridges react-native and the objective-c/Java client generated by gRPC tooling.\"), mdx(\"a\", {\n    \"href\": \"https://github.com/danijg/react-native-grpc\"\n  }, mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://gh-card.dev/repos/danijg/react-native-grpc.svg?fullname=\",\n    \"alt\": \"danijg/react-native-grpc - GitHub\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c9202936-1b02-5a35-b40b-2841974dfa67"}}}